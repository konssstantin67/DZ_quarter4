# 1. Написать программу, которая будет складывать, вычитать, умножать или делить два числа. Числа и знак операции вводятся пользователем.
# После выполнения вычисления программа не должна завершаться, а должна запрашивать новые данные для вычислений.
# Завершение программы должно выполняться при вводе символа '0' в качестве знака операции.
# Если пользователь вводит неверный знак (не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и снова запрашивать знак операции.
# Также сообщать пользователю о невозможности деления на ноль, если он ввел 0 в качестве делителя.
# while True:
#     try:
#         a, sign, b = [
#             i for i in
#             input(
#                 'Введите математическое выражение (число операнд число)(все символы вводятся через пробел): '
#             ).split()
#         ]
#     except ValueError:
#         print('Неправильный ввод.')
#         continue
#     a = int(a)
#     b = int(b)
#
#     if sign == '0':
#         break
#     elif sign == '+':
#         print(f'{a} {sign} {b} = {a + b}')
#     elif sign == '-':
#         print(f'{a} {sign} {b} = {a - b}')
#     elif sign == '*':
#         print(f'{a} {sign} {b} = {a * b}')
#     elif sign == '/':
#         try:
#             print(f'{a} {sign} {b} = {a / b}')
#         except ZeroDivisionError:
#             print('Ошибка. Деление на ноль')
# 2. Посчитать четные и нечетные цифры введенного натурального числа.
# Например, если введено число 34560, то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).
# number = input('Введите число: ')
# even = 0
# odd = 0
# for f in number:
#     i = int(f)
#     if i % 2 == 0:
#         even += 1
#     else:
#         odd += 1
# print(f'У числа {number}: четных цифр - {even}, нечетных - {odd} ')
# 3. Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран.
# Например, если введено число 3486, то надо вывести число 6843.
# number = input('Введите число: ')
#
# print(f'Крутите барабан! Вам выпало {number} а в обратную сторону будет: {number[::-1]}')
# 4. Найти сумму n элементов следующего ряда чисел: 1 -0.5 0.25 -0.125 ...Количество элементов (n) вводится с клавиатуры.
# n = int(input('Введите количество элементов: '))
# i = 0
# range_number = 1
# sum = 0
# while i < n:
#     sum += range_number
#     range_number /= -2
#     i += 1
#
# print(f'Сумма {sum}')
# 5. Вывести на экран коды и символы таблицы ASCII, начиная с символа под номером 32 и заканчивая 127-м включительно.
# Вывод выполнить в табличной форме: по десять пар "код-символ" в каждой строке.
# i = 1
# for char in range(32, 128):
#     if i % 10 == 0:
#         print(f' | {char:5}: {chr(char)} |')
#     else:
#         print(f' | {char:5}: {chr(char)} ', end=' ')
#     i += 1
# 6. В программе генерируется случайное целое число от 0 до 100. Пользователь должен его отгадать не более чем за 10 попыток.
# После каждой неудачной попытки должно сообщаться больше или меньше введенное пользователем число, чем то, что загадано.
# Если за 10 попыток число не отгадано, то вывести загаданное число.
# import random
#
# secret = random.randint(0, 101)
#
# i = 1
# while i <= 10:
#     print(f'Попытка №{i:2} из 10')
#     user_number = int(input('Введите число от 1 до 100: '))
#     if user_number == secret:
#         print('хех, угадал')
#         break
#     elif user_number > secret:
#         print(f'Уо Уо, по легче ковбой! Твое число {user_number} больше загаданного')
#     else:
#         print(f'Ну ёмоё! подумай еще! твое число {user_number} меньше загаданного')
#     i += 1
# if i > 10:
#     print(f'ХА! ЛУЗЕР! Не угадал! Загаданное число {secret}')

# 7. Напишите программу, доказывающую или проверяющую, что для множества натуральных чисел выполняется равенство: 1+2+...+n = n(n+1)/2,
# где n - любое натуральное число.
# def first(n):
#     if n == 1:
#         return n
#     elif n > 0:
#         return n + first(n-1)
#
#
# def second(n):
#     return n * (n + 1) // 2
#
#
# n = 1
#
# while True:
#     if first(n) == second(n):
#         print(f'Для n={n} - True')
#     else:
#         print(f'Для n={n} - False')
#         break
#     n += 1
# 8. Посчитать, сколько раз встречается определенная цифра в введенной последовательности чисел. Количество вводимых чисел и цифра,
# которую необходимо посчитать, задаются вводом с клавиатуры.
# user_range = input('Введите последовательность: ')
# user_patten = input('Введите цифру для поиска: ')
# count = 0
#
# for i in user_range:
#     if i == user_patten:
#         count += 1
#
# print(
#     f'Цифра встречается {user_patten} в последовательности {user_range}: \
# {count} раз(а)'
#         )

# 9. Среди натуральных чисел, которые были введены, найти наибольшее по сумме цифр. Вывести на экран это число и сумму его цифр.
def sum_numbers(number):
    sum1 = 0
    for i in number:
        sum1 += int(i)
    return sum1


list_number = [i for i in input('ВВоди свои каракули(числа)! Через пробел! ').split()]

max_number = 0
max_sum = 0
for i in list_number:
    if sum_numbers(i) > max_sum:
        max_number = i
        max_sum = sum_numbers(i)

print(f'У числа {max_number} была наибольшая сумма цифр - {max_sum}')